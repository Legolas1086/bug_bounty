
# Start of BODY
'''
TestStruct::
testcase_id                   [int] ID of the test-case
testcase_input_path           [str] File path to test-case input
testcase_output_path          [str] File path to test-case output generated by the problem solver
testcase_expected_output_path [str] File path to test-case expected output to be matched with
testcase_error_path           [str] File path to test-case STDERR
metadata_file_paths           [list<str>] File paths to Question metadata (Extra files usually used for defining traning sets)
submission_code_path          [str] File path to submission source code
submission_language           [str] Language token of submission
testcase_result               [bool] Set to True if test-case output matches test-case expected output. Matching is done line by line
testcase_signal               [int] Exit code of the test-case process
testcase_time                 [float] Time taken by the test-case process in seconds
testcase_memory               [int] Peak memory of the test-case process determined in bytes
data                          [str] <Future use>
ResultStruct::
result      [bool]  Assign test-case result. True determines success. False determines failure
score       [float] Assign test-case score. Normalized between 0 to 1
message     [str] Assign test-case message. This message is visible to the problem solver
'''

import re

def is_identical(a,b):
    x=a.replace(" ","")
    y=b.replace(" ","")
    x=x.replace("\t","")
    y=y.replace("\t","")
    if((x==y)):
        return True
    return False
    
    
    
def run_custom_checker(t_obj, r_obj):
    # Don't print anything to STDOUT in this function
    # Enter your custom checker scoring logic here
    flag=0
    count=0
    c='''#include <stdio.h>
    #include <string.h>
    #include <math.h>
    #include <stdlib.h>
    int main() {
        int n;
        scanf("%d",&n);
        if(n%2==0)
        {
            printf("even");
        }
        else
        {
            printf("odd");
        }
            return 0;
    }  '''
    code='''def prices(extras):
    cost = []
    for i in range(len(extras)):
        if extras[i] == 'odin':
            cost.append(10000)

        elif extras[i] == 'operator':
            cost.append(8000)

        elif extras[i] == 'bulldog':
            cost.append(7000)

        elif extras[i] == 'bucky':
            cost.append(5000)

        elif extras[i] == 'ghost':
            cost.append(2000)                
            
    return cost


def findExtras(n,guns):
    extras = []
    for i in range(n-1):
        for j in range(i+1,n):
            if guns[i] == guns[j]:
                extras.append(guns[j])
                break

    costs = prices(extras)

    total_cost = 0
    for i in range(len(costs)):
        total_cost += costs[i]

    return total_cost    
               


if __name__=="__main__":
    n = int(input())
    guns = list(input().rstrip().split())

    result = findExtras(n,guns)
    print(result)'''
    if t_obj.submission_language == 'c':
        code = c
        
    result_data = ''
    try:
        result_data = open(t_obj.submission_code_path, 'r').readlines()
    except IOError:
        r_obj.result = False
        r_obj.score = 0
        r_obj.message = 'Error reading result file'
        return
    
    for i in range(len(result_data)):
        result_data[i]=result_data[i][:-1]
    values=result_data
    code=code.split("\n")
    i=0
    while i<len(values):
        if(values[i].isspace()==True or len(values[i])==0):
            values.remove(values[i])
            i=i-1
        i=i+1
    i=0
    while i<len(code):
        if(code[i].isspace()==True or len(code[i])==0):
            code.remove(code[i])
            i=i-1
        i=i+1
    if(len(values)!=len(code)):
        flag=1

    else:
        for i in range(len(values)):
            if(not(is_identical(values[i],code[i]))):
                count+=1
        
            if(count>5):
                flag=1
                
    if(flag==1):
        r_obj.result = False;
        r_obj.score = 0.0;
        r_obj.message = "You Modified more than 5 lines";
    else:    
        r_obj.result = True;
        r_obj.score = 1.0;
        r_obj.message = "Success";

# End of BODY
        